/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.smartgreen.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is Event POJO */
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -701109248584646752L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.smartgreen.model\",\"doc\":\"This is Event POJO\",\"fields\":[{\"name\":\"deviceConfigId\",\"type\":\"string\"},{\"name\":\"deviceProtocolId\",\"type\":\"string\"},{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"values\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Event> ENCODER =
      new BinaryMessageEncoder<Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Event> DECODER =
      new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Event to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Event from a ByteBuffer. */
  public static Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence deviceConfigId;
  @Deprecated public java.lang.CharSequence deviceProtocolId;
  @Deprecated public java.lang.CharSequence eventId;
  @Deprecated public long timestamp;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param deviceConfigId The new value for deviceConfigId
   * @param deviceProtocolId The new value for deviceProtocolId
   * @param eventId The new value for eventId
   * @param timestamp The new value for timestamp
   * @param values The new value for values
   */
  public Event(java.lang.CharSequence deviceConfigId, java.lang.CharSequence deviceProtocolId, java.lang.CharSequence eventId, java.lang.Long timestamp, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> values) {
    this.deviceConfigId = deviceConfigId;
    this.deviceProtocolId = deviceProtocolId;
    this.eventId = eventId;
    this.timestamp = timestamp;
    this.values = values;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deviceConfigId;
    case 1: return deviceProtocolId;
    case 2: return eventId;
    case 3: return timestamp;
    case 4: return values;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deviceConfigId = (java.lang.CharSequence)value$; break;
    case 1: deviceProtocolId = (java.lang.CharSequence)value$; break;
    case 2: eventId = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: values = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deviceConfigId' field.
   * @return The value of the 'deviceConfigId' field.
   */
  public java.lang.CharSequence getDeviceConfigId() {
    return deviceConfigId;
  }

  /**
   * Sets the value of the 'deviceConfigId' field.
   * @param value the value to set.
   */
  public void setDeviceConfigId(java.lang.CharSequence value) {
    this.deviceConfigId = value;
  }

  /**
   * Gets the value of the 'deviceProtocolId' field.
   * @return The value of the 'deviceProtocolId' field.
   */
  public java.lang.CharSequence getDeviceProtocolId() {
    return deviceProtocolId;
  }

  /**
   * Sets the value of the 'deviceProtocolId' field.
   * @param value the value to set.
   */
  public void setDeviceProtocolId(java.lang.CharSequence value) {
    this.deviceProtocolId = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return The value of the 'values' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.values = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static com.smartgreen.model.Event.Builder newBuilder() {
    return new com.smartgreen.model.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static com.smartgreen.model.Event.Builder newBuilder(com.smartgreen.model.Event.Builder other) {
    return new com.smartgreen.model.Event.Builder(other);
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static com.smartgreen.model.Event.Builder newBuilder(com.smartgreen.model.Event other) {
    return new com.smartgreen.model.Event.Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private java.lang.CharSequence deviceConfigId;
    private java.lang.CharSequence deviceProtocolId;
    private java.lang.CharSequence eventId;
    private long timestamp;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> values;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.smartgreen.model.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deviceConfigId)) {
        this.deviceConfigId = data().deepCopy(fields()[0].schema(), other.deviceConfigId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deviceProtocolId)) {
        this.deviceProtocolId = data().deepCopy(fields()[1].schema(), other.deviceProtocolId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventId)) {
        this.eventId = data().deepCopy(fields()[2].schema(), other.eventId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.values)) {
        this.values = data().deepCopy(fields()[4].schema(), other.values);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(com.smartgreen.model.Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.deviceConfigId)) {
        this.deviceConfigId = data().deepCopy(fields()[0].schema(), other.deviceConfigId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deviceProtocolId)) {
        this.deviceProtocolId = data().deepCopy(fields()[1].schema(), other.deviceProtocolId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventId)) {
        this.eventId = data().deepCopy(fields()[2].schema(), other.eventId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.values)) {
        this.values = data().deepCopy(fields()[4].schema(), other.values);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'deviceConfigId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceConfigId() {
      return deviceConfigId;
    }

    /**
      * Sets the value of the 'deviceConfigId' field.
      * @param value The value of 'deviceConfigId'.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder setDeviceConfigId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.deviceConfigId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceConfigId' field has been set.
      * @return True if the 'deviceConfigId' field has been set, false otherwise.
      */
    public boolean hasDeviceConfigId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'deviceConfigId' field.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder clearDeviceConfigId() {
      deviceConfigId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceProtocolId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceProtocolId() {
      return deviceProtocolId;
    }

    /**
      * Sets the value of the 'deviceProtocolId' field.
      * @param value The value of 'deviceProtocolId'.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder setDeviceProtocolId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.deviceProtocolId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceProtocolId' field has been set.
      * @return True if the 'deviceProtocolId' field has been set, false otherwise.
      */
    public boolean hasDeviceProtocolId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'deviceProtocolId' field.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder clearDeviceProtocolId() {
      deviceProtocolId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.eventId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getValues() {
      return values;
    }

    /**
      * Sets the value of the 'values' field.
      * @param value The value of 'values'.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder setValues(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.values = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'values' field.
      * @return This builder.
      */
    public com.smartgreen.model.Event.Builder clearValues() {
      values = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Event build() {
      try {
        Event record = new Event();
        record.deviceConfigId = fieldSetFlags()[0] ? this.deviceConfigId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.deviceProtocolId = fieldSetFlags()[1] ? this.deviceProtocolId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.eventId = fieldSetFlags()[2] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.values = fieldSetFlags()[4] ? this.values : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Event>
    READER$ = (org.apache.avro.io.DatumReader<Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
