/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.smartgreen.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is Entity POJO */
@org.apache.avro.specific.AvroGenerated
public class Entity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1782674872065794427L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entity\",\"namespace\":\"com.smartgreen.model\",\"doc\":\"This is Entity POJO\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"runAt\",\"type\":\"long\"},{\"name\":\"original\",\"type\":\"boolean\"},{\"name\":\"anomaly\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Entity> ENCODER =
      new BinaryMessageEncoder<Entity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Entity> DECODER =
      new BinaryMessageDecoder<Entity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Entity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Entity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Entity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Entity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Entity from a ByteBuffer. */
  public static Entity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public double value;
  @Deprecated public long runAt;
  @Deprecated public boolean original;
  @Deprecated public boolean anomaly;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Entity() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param uuid The new value for uuid
   * @param value The new value for value
   * @param runAt The new value for runAt
   * @param original The new value for original
   * @param anomaly The new value for anomaly
   */
  public Entity(java.lang.Integer id, java.lang.CharSequence uuid, java.lang.Double value, java.lang.Long runAt, java.lang.Boolean original, java.lang.Boolean anomaly) {
    this.id = id;
    this.uuid = uuid;
    this.value = value;
    this.runAt = runAt;
    this.original = original;
    this.anomaly = anomaly;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return uuid;
    case 2: return value;
    case 3: return runAt;
    case 4: return original;
    case 5: return anomaly;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: uuid = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.Double)value$; break;
    case 3: runAt = (java.lang.Long)value$; break;
    case 4: original = (java.lang.Boolean)value$; break;
    case 5: anomaly = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'runAt' field.
   * @return The value of the 'runAt' field.
   */
  public java.lang.Long getRunAt() {
    return runAt;
  }

  /**
   * Sets the value of the 'runAt' field.
   * @param value the value to set.
   */
  public void setRunAt(java.lang.Long value) {
    this.runAt = value;
  }

  /**
   * Gets the value of the 'original' field.
   * @return The value of the 'original' field.
   */
  public java.lang.Boolean getOriginal() {
    return original;
  }

  /**
   * Sets the value of the 'original' field.
   * @param value the value to set.
   */
  public void setOriginal(java.lang.Boolean value) {
    this.original = value;
  }

  /**
   * Gets the value of the 'anomaly' field.
   * @return The value of the 'anomaly' field.
   */
  public java.lang.Boolean getAnomaly() {
    return anomaly;
  }

  /**
   * Sets the value of the 'anomaly' field.
   * @param value the value to set.
   */
  public void setAnomaly(java.lang.Boolean value) {
    this.anomaly = value;
  }

  /**
   * Creates a new Entity RecordBuilder.
   * @return A new Entity RecordBuilder
   */
  public static com.smartgreen.model.Entity.Builder newBuilder() {
    return new com.smartgreen.model.Entity.Builder();
  }

  /**
   * Creates a new Entity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Entity RecordBuilder
   */
  public static com.smartgreen.model.Entity.Builder newBuilder(com.smartgreen.model.Entity.Builder other) {
    return new com.smartgreen.model.Entity.Builder(other);
  }

  /**
   * Creates a new Entity RecordBuilder by copying an existing Entity instance.
   * @param other The existing instance to copy.
   * @return A new Entity RecordBuilder
   */
  public static com.smartgreen.model.Entity.Builder newBuilder(com.smartgreen.model.Entity other) {
    return new com.smartgreen.model.Entity.Builder(other);
  }

  /**
   * RecordBuilder for Entity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entity>
    implements org.apache.avro.data.RecordBuilder<Entity> {

    private int id;
    private java.lang.CharSequence uuid;
    private double value;
    private long runAt;
    private boolean original;
    private boolean anomaly;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.smartgreen.model.Entity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.runAt)) {
        this.runAt = data().deepCopy(fields()[3].schema(), other.runAt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.original)) {
        this.original = data().deepCopy(fields()[4].schema(), other.original);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.anomaly)) {
        this.anomaly = data().deepCopy(fields()[5].schema(), other.anomaly);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Entity instance
     * @param other The existing instance to copy.
     */
    private Builder(com.smartgreen.model.Entity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.runAt)) {
        this.runAt = data().deepCopy(fields()[3].schema(), other.runAt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.original)) {
        this.original = data().deepCopy(fields()[4].schema(), other.original);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.anomaly)) {
        this.anomaly = data().deepCopy(fields()[5].schema(), other.anomaly);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setValue(double value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'runAt' field.
      * @return The value.
      */
    public java.lang.Long getRunAt() {
      return runAt;
    }

    /**
      * Sets the value of the 'runAt' field.
      * @param value The value of 'runAt'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setRunAt(long value) {
      validate(fields()[3], value);
      this.runAt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'runAt' field has been set.
      * @return True if the 'runAt' field has been set, false otherwise.
      */
    public boolean hasRunAt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'runAt' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearRunAt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'original' field.
      * @return The value.
      */
    public java.lang.Boolean getOriginal() {
      return original;
    }

    /**
      * Sets the value of the 'original' field.
      * @param value The value of 'original'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setOriginal(boolean value) {
      validate(fields()[4], value);
      this.original = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'original' field has been set.
      * @return True if the 'original' field has been set, false otherwise.
      */
    public boolean hasOriginal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'original' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearOriginal() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'anomaly' field.
      * @return The value.
      */
    public java.lang.Boolean getAnomaly() {
      return anomaly;
    }

    /**
      * Sets the value of the 'anomaly' field.
      * @param value The value of 'anomaly'.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder setAnomaly(boolean value) {
      validate(fields()[5], value);
      this.anomaly = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'anomaly' field has been set.
      * @return True if the 'anomaly' field has been set, false otherwise.
      */
    public boolean hasAnomaly() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'anomaly' field.
      * @return This builder.
      */
    public com.smartgreen.model.Entity.Builder clearAnomaly() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Entity build() {
      try {
        Entity record = new Entity();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.Double) defaultValue(fields()[2]);
        record.runAt = fieldSetFlags()[3] ? this.runAt : (java.lang.Long) defaultValue(fields()[3]);
        record.original = fieldSetFlags()[4] ? this.original : (java.lang.Boolean) defaultValue(fields()[4]);
        record.anomaly = fieldSetFlags()[5] ? this.anomaly : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Entity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Entity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Entity>
    READER$ = (org.apache.avro.io.DatumReader<Entity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
